
services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: racky-mongodb
    restart: unless-stopped
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    networks:
      - racky-network

  # Redis Cache & Queue
  redis:
    image: redis:7.2-alpine
    container_name: racky-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - racky-network
    command: redis-server --appendonly yes

  # Backend Service
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: racky-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:5000"
    depends_on:
      - mongodb
      - redis
    env_file:
      - .env.docker
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/racky
      - PORT=5000
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - racky-network
    command: npm run dev

  # Frontend Service
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: racky-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:5173"
    depends_on:
      - backend
    env_file:
      - .env.docker
    environment:
      - VITE_BACKEND_URL=http://backend:5000
      - DOCKER_ENV=true
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - racky-network
    command: npm run dev -- --host 0.0.0.0

volumes:
  mongodb_data:
  redis_data:

networks:
  racky-network:
    driver: bridge